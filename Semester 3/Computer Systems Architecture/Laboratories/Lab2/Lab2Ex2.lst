     1                                  ; 4.  (a*2+b/2+e)/(c-d)+x/a; (signed) 12/3+6/3=4+2=6
     2                                  ; a-word; b,c,d-byte; e-doubleword; x-qword
     3                                  
     4                                  bits 32 ; assembling for the 32 bits architecture
     5                                  
     6                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     7                                  global start 
     8                                     
     9                                  ; declare external functions needed by our program
    10                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    11                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      
    17 00000000 00000000                    aux dd 0
    18 00000004 0300                        a dw 3
    19 00000006 02                          b db 2
    20 00000007 07                          c db 7
    21 00000008 05000000                    e dd 5
    22 0000000C 04                          d db 4
    23 0000000D 0600000000000000            x dq 6
    24                                     
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28 00000000 66A1[04000000]                  mov AX, [a]; AX=a --> word
    29 00000006 666BC002                        imul AX, 2; AX=a*2
    30 0000000A 6689C3                          mov BX, AX; BX=a*2
    31                                          
    32 0000000D A0[06000000]                    mov AL, [b]; AL = b --> byte111
    33 00000012 6698                            CBW
    34 00000014 B102                            mov CL, 2
    35 00000016 F6F9                            idiv CL
    36 00000018 6698                            cbw; AX = b/2 --> word 
    37                                          
    38 0000001A 6601D8                          add AX, BX; AX=a*2+b/2 --> word
    39 0000001D 98                              cwde; EAX=a*2+b/2
    40 0000001E 0305[08000000]                  add EAX, [e]; EAX=a*2+b/2+e
    41                                          
    42 00000024 8A1D[07000000]                  mov BL, [c]
    43 0000002A 8A0D[0C000000]                  mov CL, [d]
    44 00000030 28CB                            sub BL, CL; BL=c-d
    45                                          
    46 00000032 660FBEDB                        movSX BX, BL; BX=c-d
    47 00000036 66B90000                        mov CX, 0
    48 0000003A 6651                            push CX
    49 0000003C 6653                            push BX
    50 0000003E 5B                              pop EBX
    51 0000003F 99                              cdq; nu pot imparti doubleword la word
    52 00000040 F7FB                            idiv EBX; EAX=(a*2+b/2+e)/(c-d) --> doubleword
    53                                          
    54 00000042 89C3                            mov EBX, EAX; EBX=(a*2+b/2+e)/(c-d) --> doubleword
    55 00000044 A1[0D000000]                    mov EAX, dword[x]
    56 00000049 8B15[11000000]                  mov EDX, dword[x+4]; EDX:EAX=x
    57 0000004F 891D[00000000]                  mov [aux], EBX 
    58 00000055 668B1D[04000000]                mov BX, [a]
    59 0000005C 66B90000                        mov CX, 0; CX:BX=a
    60 00000060 6651                            push CX
    61 00000062 6653                            push BX
    62 00000064 5B                              pop EBX;
    63 00000065 F7FB                            idiv EBX; EAX=x/a
    64                                          
    65 00000067 0305[00000000]                  add EAX, [aux]; EAX=(a*2+b/2+e)/(c-d)+x/a
    66                                          
    67                                          ; exit(0)
    68 0000006D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    69 0000006F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
    70                                  
    71                                      
