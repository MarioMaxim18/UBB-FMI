     1                                  ; 4. –a*a + 2*(b-1) – d (signed)
     2                                  ; a,b,c - byte, d - word 
     3                                  
     4                                  bits 32 ; assembling for the 32 bits architecture
     5                                  
     6                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     7                                  global start 
     8                                     
     9                                  ; declare external functions needed by our program
    10                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    11                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                  
    17 00000000 03                          a db 3
    18 00000001 02                          b db 2
    19 00000002 0400                        d dw 4
    20                                     
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24 00000000 A0[00000000]                    mov AL, [a]
    25 00000005 F6E8                            imul AL; AX=a*a --> word
    26 00000007 66B9FFFF                        mov CX, -1
    27 0000000B 66F7E9                          imul CX; DX:AX=-(a*a)
    28 0000000E 6689C3                          mov BX, AX; BX=a*a --> word
    29                                  
    30 00000011 A0[01000000]                    mov AL, [b]
    31 00000016 2C01                            sub AL, 1; AL=b-1
    32 00000018 F62D02000000                    imul byte[2]; AX=2*(b-1) --> word
    33                                  
    34 0000001E 6601C3                          add BX, AX; BX=–a*a + 2*(b-1)
    35                                  
    36 00000021 662B1D[02000000]                SUB BX, [d]; BX=–a*a + 2*(b-1) - d
    37                                  
    38                                          ; exit(0)
    39 00000028 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    40 0000002A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
    41                                  
    42                                      
